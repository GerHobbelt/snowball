// deno-lint-ignore-file
import BaseStemmer from '../core/base-stemmer.mjs'
// Generated by Snowball 2.2.0 - https://snowballstem.org/

/**@constructor*/
/** @type {StemmerConstructor} */
export default (function CzechStemmer() {
	var base = new BaseStemmer()
	/** @const */ var a_0 = [
		['', -1, 14],
		['\u00E1', 0, 1],
		['\u00E9', 0, 2],
		['\u00ED', 0, 3],
		['\u00F3', 0, 4],
		['\u00FA', 0, 5],
		['\u00FD', 0, 6],
		['\u010D', 0, 7],
		['\u010F', 0, 8],
		['\u011B', 0, 2],
		['\u0148', 0, 9],
		['\u0159', 0, 10],
		['\u0161', 0, 11],
		['\u0165', 0, 12],
		['\u016F', 0, 5],
		['\u017E', 0, 13],
	]

	/** @const */ var a_1 = [
		['bude', -1, 1],
		['budeme', 0, 1],
		['budete', 0, 1],
		['bude\u0161', 0, 1],
		['budou', -1, 1],
		['budu', -1, 1],
		['bu\u010F', -1, 1],
		['bu\u010Fme', 6, 1],
		['bu\u010Fte', 6, 1],
		['byl', -1, 1],
		['chce', -1, 8],
		['chceme', 10, 8],
		['chcete', 10, 8],
		['chce\u0161', 10, 8],
		['chci', -1, 8],
		['cht\u00EDc', -1, 8],
		['cht\u00EDce', 15, 8],
		['cht\u011B', -1, 8],
		['cht\u011Bj', 17, 8],
		['cht\u011Bje', 18, 8],
		['cht\u011Bjme', 18, 8],
		['cht\u011Bjte', 18, 8],
		['cht\u011Bj\u00ED', 18, 8],
		['cht\u011Bj\u00EDc', 22, 8],
		['cht\u011Bj\u00EDce', 23, 8],
		['cht\u011Bl', 17, 8],
		['cht\u011Bn', 17, 8],
		['jda', -1, 3],
		['jde', -1, 3],
		['jdeme', 28, 3],
		['jdete', 28, 3],
		['jde\u0161', 28, 3],
		['jdi', -1, 3],
		['jdou', -1, 3],
		['jdouc', 33, 3],
		['jdouce', 34, 3],
		['jdu', -1, 3],
		['jd\u011Bme', -1, 3],
		['jd\u011Bte', -1, 3],
		['je', -1, 1],
		['jeda', 39, 4],
		['jeden', 39, 4],
		['jedl', 39, 4],
		['jedouc', 39, 4],
		['jedouce', 43, 4],
		['jed\u00ED', 39, 4],
		['jez', 39, 4],
		['jezme', 46, 4],
		['jezte', 46, 4],
		['jsa', -1, 1],
		['jsem', -1, 1],
		['jsi', -1, 1],
		['jsme', -1, 1],
		['jsou', -1, 1],
		['jsouc', 53, 1],
		['jsouce', 54, 1],
		['jste', -1, 1],
		['j\u00ED', -1, 4],
		['j\u00EDm', 57, 4],
		['j\u00EDme', 58, 4],
		['j\u00EDte', 57, 4],
		['j\u00ED\u0161', 57, 4],
		['maje', -1, 2],
		['maj\u00ED', -1, 2],
		['maj\u00EDc', 63, 2],
		['maj\u00EDce', 64, 2],
		['m\u00E1', -1, 2],
		['m\u00E1m', 66, 2],
		['m\u00E1me', 67, 2],
		['m\u00E1te', 66, 2],
		['m\u00E1\u0161', 66, 2],
		['m\u011Bj', -1, 2],
		['m\u011Bjme', 71, 2],
		['m\u011Bjte', 71, 2],
		['m\u011Bl', -1, 2],
		['poj\u010F', -1, 3],
		['poj\u010Fte', 75, 3],
		['p\u016Fjde', -1, 3],
		['p\u016Fjdeme', 77, 3],
		['p\u016Fjdete', 77, 3],
		['p\u016Fjde\u0161', 77, 3],
		['p\u016Fjdou', -1, 3],
		['p\u016Fjdu', -1, 3],
		['sn\u00ED', -1, 5],
		['sn\u00EDm', 83, 5],
		['sn\u00EDme', 84, 5],
		['sn\u00EDte', 83, 5],
		['sn\u00ED\u0161', 83, 5],
		['sn\u011Bden', -1, 5],
		['sn\u011Bdl', -1, 5],
		['sn\u011Bd\u00ED', -1, 5],
		['sn\u011Bz', -1, 5],
		['sn\u011Bzme', 91, 5],
		['sn\u011Bzte', 91, 5],
		['vida', -1, 6],
		['vidouc', -1, 6],
		['vidouce', 95, 6],
		['vid\u00ED', -1, 6],
		['vid\u00EDm', 97, 6],
		['vid\u00EDme', 98, 6],
		['vid\u00EDte', 97, 6],
		['vid\u00ED\u0161', 97, 6],
		['vid\u011Bl', -1, 6],
		['vid\u011Bn', -1, 6],
		['viz', -1, 6],
		['vizme', 104, 6],
		['vizte', 104, 6],
		['v\u00ED', -1, 7],
		['v\u00EDm', 107, 7],
		['v\u00EDme', 108, 7],
		['v\u00EDte', 107, 7],
		['v\u00ED\u0161', 107, 7],
		['v\u011Bda', -1, 7],
		['v\u011Bdouc', -1, 7],
		['v\u011Bdouce', 113, 7],
		['v\u011Bd\u00ED', -1, 7],
		['v\u011Bd\u011Bl', -1, 7],
		['v\u011Bd\u011Bn', -1, 7],
		['v\u011Bz', -1, 7],
		['v\u011Bzme', 118, 7],
		['v\u011Bzte', 118, 7],
		['\u0161el', -1, 3],
		['\u0161la', -1, 3],
		['\u0161li', -1, 3],
		['\u0161lo', -1, 3],
	]

	/** @const */ var a_2 = [
		['ba', -1, 1],
		['oba', 0, 1],
		['tba', 0, 1],
		['itba', 2, 1],
		['nda', -1, 1],
		['ucha', -1, 1],
		['ka', -1, 1],
		['ika', 6, 1],
		['nka', 6, 1],
		['enka', 8, 1],
		['inka', 8, 1],
		['\u011Bnka', 8, 1],
		['tka', 6, 1],
		['vka', 6, 1],
		['t\u00E9ka', 6, 1],
		['\u010Dka', 6, 1],
		['e\u010Dka', 15, 1],
		['\u00ED\u010Dka', 15, 1],
		['u\u0161ka', 6, 1],
		['ala', -1, 1],
		['\u00E1la', -1, 1],
		['na', -1, 1],
		['ina', 21, 1],
		['tina', 22, 1],
		['\u0161tina', 23, 1],
		['ovina', 22, 1],
		['telna', 21, 1],
		['\u00E1rna', 21, 1],
		['\u00EDrna', 21, 1],
		['ovna', 21, 1],
		['izna', 21, 1],
		['ajzna', 21, 1],
		['ura', -1, 1],
		['tura', 32, 1],
		['ita', -1, 1],
		['ota', -1, 1],
		['ista', -1, 1],
		['tva', -1, 1],
		['ec', -1, 1],
		['inec', 38, 1],
		['obinec', 39, 1],
		['tec', 38, 1],
		['ovec', 38, 1],
		['\u0159ad', -1, 1],
		['vod', -1, 1],
		['ce', -1, 1],
		['ace', 45, 1],
		['ice', 45, 1],
		['nice', 47, 1],
		['enice', 48, 1],
		['nce', 45, 1],
		['ance', 50, 1],
		['ence', 50, 1],
		['ie', -1, 1],
		['erie', 53, 1],
		['ule', -1, 1],
		['se', -1, 1],
		['xe', -1, 1],
		['ze', -1, 1],
		['\u010De', -1, 1],
		['graf', -1, 1],
		['ing', -1, 1],
		['log', -1, 1],
		['och', -1, 1],
		['ek', -1, 1],
		['\u00E1nek', 64, 1],
		['\u00EDnek', 64, 1],
		['\u00E1sek', 64, 1],
		['e\u010Dek', 64, 1],
		['\u00E1\u010Dek', 64, 1],
		['\u00ED\u010Dek', 64, 1],
		['ou\u0161ek', 64, 1],
		['ik', -1, 1],
		['ink', -1, 1],
		['unk', -1, 1],
		['\u00E1k', -1, 1],
		['\u00EDk', -1, 1],
		['n\u00EDk', 76, 2],
		['ovn\u00EDk', 77, 1],
		['u\u0148k', -1, 1],
		['tel', -1, 1],
		['ovatel', 80, 1],
		['itel', 80, 1],
		['\u00E1l', -1, 1],
		['nom', -1, 1],
		['ium', -1, 1],
		['ikum', -1, 1],
		['ivum', -1, 1],
		['an', -1, 1],
		['\u010Dan', 88, 1],
		['oun', -1, 1],
		['loun', 90, 1],
		['\u00E1n', -1, 1],
		['i\u00E1n', 92, 1],
		['\u00EDn', -1, 1],
		['ko', -1, 1],
		['isko', 95, 1],
		['ovisko', 96, 1],
		['tko', 95, 1],
		['\u00E1tko', 98, 1],
		['e\u010Dko', 95, 1],
		['\u00E9\u010Dko', 95, 1],
		['\u00ED\u010Dko', 95, 1],
		['lo', -1, 1],
		['dlo', 103, 1],
		['no', -1, 1],
		['\u010Dno', 105, 1],
		['ivo', -1, 1],
		['tvo', -1, 1],
		['stvo', 108, 1],
		['ovstvo', 109, 1],
		['er', -1, 1],
		['or', -1, 1],
		['tor', 112, 1],
		['\u00E1tor', 113, 1],
		['our', -1, 1],
		['\u00E9r', -1, 1],
		['i\u00E9r', 116, 1],
		['at\u00E9r', 116, 1],
		['m\u011Br', -1, 1],
		['as', -1, 1],
		['ismus', -1, 1],
		['met', -1, 1],
		['ant', -1, 1],
		['ent', -1, 1],
		['ment', 124, 1],
		['ot', -1, 1],
		['est', -1, 1],
		['ost', -1, 1],
		['nost', 128, 1],
		['out', -1, 1],
		['\u00E1t', -1, 1],
		['ov', -1, 1],
		['iny', -1, 1],
		['n\u00E1', -1, 1],
		['ov\u00E1', -1, 1],
		['n\u00E9', -1, 1],
		['ovn\u00E9', 136, 1],
		['\u0159ad\u00ED', -1, 1],
		['n\u00ED', -1, 1],
		['an\u00ED', 139, 1],
		['en\u00ED', 139, 1],
		['\u00E1n\u00ED', 139, 1],
		['\u011Bn\u00ED', 139, 1],
		['t\u00ED', -1, 1],
		['et\u00ED', 144, 1],
		['\u011Bt\u00ED', 144, 1],
		['ov\u00ED', -1, 1],
		['slov\u00ED', 147, 1],
		['ctv\u00ED', -1, 1],
		['stv\u00ED', -1, 1],
		['\u010D\u00ED', -1, 1],
		['\u00E1\u010D', -1, 1],
		['yn\u011B', -1, 1],
		['kyn\u011B', 153, 1],
		['i\u0161t\u011B', -1, 1],
		['ovi\u0161t\u011B', 155, 1],
		['o\u0148', -1, 1],
		['a\u0159', -1, 1],
		['to\u0159', -1, 1],
		['\u00E1\u0159', -1, 1],
		['k\u00E1\u0159', 160, 1],
		['ion\u00E1\u0159', 160, 1],
		['\u00E9\u0159', -1, 1],
		['n\u00E9\u0159', 163, 1],
		['\u00ED\u0159', -1, 1],
		['\u00FD\u0159', -1, 1],
		['ou\u0161', -1, 1],
		['\u00FD\u0161', -1, 1],
		['\u00E1\u017E', -1, 1],
	]

	/** @const */ var a_3 = [
		['a', -1, 17],
		['ba', 0, 17],
		['ga', 0, 11],
		['ka', 0, 17],
		['la', 0, 3],
		['na', 0, 17],
		['ra', 0, 17],
		['ata', 0, 17],
		['va', 0, 17],
		['eb', -1, 1],
		['ec', -1, 17],
		['e', -1, 17],
		['ce', 11, 17],
		['le', 11, 3],
		['ete', 11, 6],
		['\u011Bte', 11, 15],
		['\u010De', 11, 2],
		['g', -1, 17],
		['ech', -1, 17],
		['lech', 18, 3],
		['nech', 18, 7],
		['atech', 18, 17],
		['vech', 18, 12],
		['\u00E1ch', -1, 13],
		['b\u00E1ch', 23, 1],
		['k\u00E1ch', 23, 17],
		['n\u00E1ch', 23, 5],
		['r\u00E1ch', 23, 4],
		['v\u00E1ch', 23, 8],
		['\u00EDch', -1, 17],
		['c\u00EDch', 29, 17],
		['n\u00EDch', 29, 17],
		['t\u00EDch', 29, 10],
		['z\u00EDch', 29, 17],
		['i', -1, 17],
		['ci', 34, 17],
		['ami', 34, 13],
		['bami', 36, 1],
		['kami', 36, 16],
		['nami', 36, 5],
		['rami', 36, 4],
		['vami', 36, 8],
		['emi', 34, 17],
		['\u011Bmi', 34, 15],
		['n\u011Bmi', 43, 14],
		['ni', 34, 17],
		['ti', 34, 10],
		['eti', 46, 6],
		['\u011Bti', 46, 15],
		['ovi', 34, 17],
		['govi', 49, 11],
		['kovi', 49, 9],
		['zi', 34, 17],
		['k', -1, 17],
		['ek', 53, 17],
		['el', -1, 3],
		['em', -1, 17],
		['cem', 56, 2],
		['gem', 56, 11],
		['kem', 56, 17],
		['lem', 56, 3],
		['nem', 56, 7],
		['etem', 56, 6],
		['\u011Btem', 56, 15],
		['vem', 56, 12],
		['um', -1, 17],
		['kum', 65, 17],
		['\u00E1m', -1, 13],
		['b\u00E1m', 67, 1],
		['k\u00E1m', 67, 16],
		['n\u00E1m', 67, 5],
		['r\u00E1m', 67, 4],
		['v\u00E1m', 67, 8],
		['\u00EDm', -1, 17],
		['n\u00EDm', 73, 17],
		['t\u00EDm', 73, 10],
		['t\u011Bm', -1, 10],
		['\u016Fm', -1, 17],
		['c\u016Fm', 77, 2],
		['g\u016Fm', 77, 11],
		['k\u016Fm', 77, 17],
		['l\u016Fm', 77, 3],
		['n\u016Fm', 77, 7],
		['at\u016Fm', 77, 17],
		['v\u016Fm', 77, 12],
		['en', -1, 17],
		['o', -1, 17],
		['bo', 86, 1],
		['ko', 86, 17],
		['lo', 86, 17],
		['no', 86, 17],
		['ro', 86, 4],
		['vo', 86, 17],
		['r', -1, 4],
		['at', -1, 17],
		['u', -1, 17],
		['bu', 95, 1],
		['gu', 95, 11],
		['ku', 95, 17],
		['lu', 95, 3],
		['nu', 95, 17],
		['ou', 95, 13],
		['bou', 101, 1],
		['kou', 101, 16],
		['nou', 101, 5],
		['rou', 101, 4],
		['vou', 101, 8],
		['ru', 95, 4],
		['vu', 95, 17],
		['ev', -1, 17],
		['y', -1, 17],
		['by', 110, 1],
		['gy', 110, 11],
		['ky', 110, 17],
		['ly', 110, 3],
		['ny', 110, 17],
		['ry', 110, 4],
		['aty', 110, 17],
		['vy', 110, 17],
		['\u00E9', -1, 17],
		['ov\u00E9', 119, 17],
		['gov\u00E9', 120, 11],
		['\u00ED', -1, 17],
		['n\u00ED', 122, 17],
		['\u011B', -1, 17],
		['b\u011B', 124, 1],
		['n\u011B', 124, 17],
		['t\u011B', 124, 17],
		['v\u011B', 124, 8],
		['\u0148', -1, 17],
		['e\u0148', 129, 17],
		['\u0165', -1, 10],
		['\u016F', -1, 17],
		['c\u016F', 132, 2],
		['g\u016F', 132, 11],
		['k\u016F', 132, 17],
	]

	/** @const */ var a_4 = [
		['ina', -1, 2],
		['ova', -1, 1],
		['ovic', -1, 1],
		['in', -1, 2],
		['ino', -1, 2],
		['ovo', -1, 1],
		['\u016Fv', -1, 1],
		['c\u00ED', -1, 1],
		['ac\u00ED', 7, 1],
		['ic\u00ED', 7, 1],
		['n\u00ED', -1, 4],
		['biln\u00ED', 10, 1],
		['\u00E1ln\u00ED', 10, 1],
		['\u00E1rn\u00ED', 10, 1],
		['tn\u00ED', 10, 1],
		['ntn\u00ED', 14, 1],
		['ivn\u00ED', 10, 1],
		['ovn\u00ED', 10, 1],
		['a\u010Dn\u00ED', 10, 1],
		['e\u010Dn\u00ED', 10, 1],
		['i\u010Dn\u00ED', 10, 1],
		['ov\u00ED', -1, 1],
		['\u010D\u00ED', -1, 1],
		['\u0161\u00ED', -1, 1],
		['ej\u0161\u00ED', 23, 6],
		['\u011Bj\u0161\u00ED', 23, 6],
		['n\u011Bj\u0161\u00ED', 25, 1],
		['ovn\u011Bj\u0161\u00ED', 26, 1],
		['t\u011Bj\u0161\u00ED', 25, 1],
		['\u0161t\u011Bj\u0161\u00ED', 28, 3],
		['ij\u0161t\u011Bj\u0161\u00ED', 29, 3],
		['ov\u0161t\u011Bj\u0161\u00ED', 29, 1],
		['ov\u011Bj\u0161\u00ED', 25, 1],
		['k\u00FD', -1, 3],
		['ck\u00FD', 33, 1],
		['ick\u00FD', 34, 1],
		['ink\u00FD', 33, 2],
		['ilink\u00FD', 36, 1],
		['oulink\u00FD', 36, 1],
		['ounink\u00FD', 36, 1],
		['ounk\u00FD', 33, 1],
		['sk\u00FD', 33, 3],
		['ijsk\u00FD', 41, 1],
		['\u00E1nsk\u00FD', 41, 1],
		['ovsk\u00FD', 41, 3],
		['i\u010Dk\u00FD', 33, 2],
		['i\u010Di\u010Dk\u00FD', 45, 1],
		['ou\u010Dk\u00FD', 33, 1],
		['l\u00FD', -1, 1],
		['i\u010Del\u00FD', 48, 1],
		['il\u00FD', 48, 1],
		['n\u00FD', -1, 4],
		['ovan\u00FD', 51, 1],
		['cn\u00FD', 51, 1],
		['en\u00FD', 51, 1],
		['teln\u00FD', 51, 1],
		['iteln\u00FD', 55, 4],
		['tn\u00FD', 51, 1],
		['utn\u00FD', 57, 1],
		['e\u010Dn\u00FD', 51, 1],
		['i\u010Dn\u00FD', 51, 1],
		['\u011Bn\u00FD', 51, 1],
		['at\u00FD', -1, 1],
		['inkat\u00FD', 62, 1],
		['nat\u00FD', 62, 5],
		['it\u00FD', -1, 2],
		['ovit\u00FD', 65, 1],
		['i\u010Dit\u00FD', 65, 1],
		['ist\u00FD', -1, 1],
		['ut\u00FD', -1, 1],
		['v\u00FD', -1, 1],
		['av\u00FD', 70, 1],
		['kav\u00FD', 71, 1],
		['lav\u00FD', 71, 1],
		['iv\u00FD', 70, 2],
		['liv\u00FD', 74, 1],
		['ov\u00FD', 70, 1],
	]

	/** @const */ var a_5 = [
		['ina', -1, 11],
		['ova', -1, 9],
		['\u00EDch', -1, 8],
		['\u00FDch', -1, 10],
		['h\u00FDch', 3, 5],
		['ch\u00FDch', 4, 4],
		['k\u00FDch', 3, 3],
		['ck\u00FDch', 6, 2],
		['sk\u00FDch', 6, 1],
		['in\u00FDch', 3, 11],
		['r\u00FDch', 3, 6],
		['ov\u00FDch', 3, 9],
		['\u00EDmi', -1, 8],
		['\u00FDmi', -1, 10],
		['h\u00FDmi', 13, 5],
		['ch\u00FDmi', 14, 4],
		['k\u00FDmi', 13, 3],
		['ck\u00FDmi', 16, 2],
		['sk\u00FDmi', 16, 1],
		['in\u00FDmi', 13, 11],
		['r\u00FDmi', 13, 6],
		['ov\u00FDmi', 13, 9],
		['ini', -1, 11],
		['ovi', -1, 9],
		['\u00E9m', -1, 10],
		['h\u00E9m', 24, 5],
		['ch\u00E9m', 25, 4],
		['k\u00E9m', 24, 3],
		['ck\u00E9m', 27, 2],
		['sk\u00E9m', 27, 1],
		['r\u00E9m', 24, 6],
		['\u00EDm', -1, 8],
		['\u00FDm', -1, 10],
		['h\u00FDm', 32, 5],
		['ch\u00FDm', 33, 4],
		['k\u00FDm', 32, 3],
		['ck\u00FDm', 35, 2],
		['sk\u00FDm', 35, 1],
		['in\u00FDm', 32, 11],
		['r\u00FDm', 32, 6],
		['ov\u00FDm', 32, 9],
		['in', -1, 11],
		['\u00E9ho', -1, 10],
		['h\u00E9ho', 42, 5],
		['ch\u00E9ho', 43, 4],
		['k\u00E9ho', 42, 3],
		['ck\u00E9ho', 45, 2],
		['sk\u00E9ho', 45, 1],
		['r\u00E9ho', 42, 6],
		['\u00EDho', -1, 8],
		['ino', -1, 11],
		['ovo', -1, 9],
		['\u00E9mu', -1, 10],
		['h\u00E9mu', 52, 5],
		['ch\u00E9mu', 53, 4],
		['k\u00E9mu', 52, 3],
		['ck\u00E9mu', 55, 2],
		['sk\u00E9mu', 55, 1],
		['r\u00E9mu', 52, 6],
		['\u00EDmu', -1, 8],
		['inu', -1, 11],
		['ou', -1, 10],
		['hou', 61, 5],
		['chou', 62, 4],
		['kou', 61, 3],
		['ckou', 64, 2],
		['skou', 64, 1],
		['inou', 61, 11],
		['rou', 61, 6],
		['ovou', 61, 9],
		['ovu', -1, 9],
		['\u016Fv', -1, 9],
		['iny', -1, 11],
		['ovy', -1, 9],
		['\u00E1', -1, 10],
		['h\u00E1', 74, 5],
		['ch\u00E1', 75, 4],
		['k\u00E1', 74, 3],
		['ck\u00E1', 77, 2],
		['sk\u00E1', 77, 1],
		['r\u00E1', 74, 6],
		['\u00E9', -1, 10],
		['h\u00E9', 81, 5],
		['ch\u00E9', 82, 4],
		['k\u00E9', 81, 3],
		['ck\u00E9', 84, 2],
		['sk\u00E9', 84, 1],
		['r\u00E9', 81, 6],
		['\u00ED', -1, 10],
		['c\u00ED', 88, 3],
		['\u010Dt\u00ED', 88, 2],
		['\u0161t\u00ED', 88, 1],
		['av\u00ED', 88, 7],
		['\u0159\u00ED', 88, 6],
		['ej\u0161\u00ED', 88, 10],
		['\u0159ej\u0161\u00ED', 94, 6],
		['\u011Bj\u0161\u00ED', 88, 10],
		['\u010Dt\u011Bj\u0161\u00ED', 96, 2],
		['\u0161t\u011Bj\u0161\u00ED', 96, 1],
		['r\u0161\u00ED', 88, 6],
		['\u0161\u0161\u00ED', 88, 4],
		['\u017E\u0161\u00ED', 88, 5],
		['\u00FD', -1, 10],
		['h\u00FD', 102, 5],
		['ch\u00FD', 103, 4],
		['k\u00FD', 102, 3],
		['ck\u00FD', 105, 2],
		['sk\u00FD', 105, 1],
		['r\u00FD', 102, 6],
		['in\u011B', -1, 11],
		['ov\u011B', -1, 9],
	]

	/** @const */ var a_6 = [
		['t', -1, 1],
		['at', 0, 1],
		['ovat', 1, 1],
		['zat', 1, 1],
		['ct', 0, 1],
		['et', 0, 1],
		['it', 0, 1],
		['dit', 6, 1],
		['sit', 6, 1],
		['stit', 6, 1],
		['nout', 0, 1],
		['sknout', 10, 1],
		['r\u00E1t', 0, 1],
		['\u0159\u00EDt', 0, 1],
		['\u011Bt', 0, 1],
	]

	/** @const */ var a_7 = [
		['a', -1, 3],
		['ka', 0, 6],
		['la', 0, 3],
		['ala', 2, 16],
		['rala', 3, 2],
		['ovala', 3, 1],
		['zala', 3, 4],
		['ela', 2, 8],
		['\u0159ela', 7, 11],
		['ila', 2, 13],
		['dila', 9, 15],
		['sila', 9, 7],
		['stila', 9, 14],
		['zila', 9, 13],
		['kla', 2, 6],
		['skla', 14, 9],
		['nula', 2, 5],
		['\u011Bla', 2, 10],
		['na', 0, 5],
		['ena', 18, 16],
		['zena', 19, 15],
		['\u010Dena', 19, 6],
		['\u0159ena', 19, 11],
		['\u0161ena', 19, 7],
		['\u017Eena', 19, 13],
		['skna', 18, 9],
		['\u00E1na', 18, 12],
		['r\u00E1na', 26, 2],
		['ov\u00E1na', 26, 1],
		['z\u00E1na', 26, 4],
		['\u011Bna', 18, 10],
		['st\u011Bna', 30, 14],
		['\u0161t\u011Bna', 30, 16],
		['ra', 0, 11],
		['era', 33, 2],
		['ta', 0, 3],
		['ata', 35, 5],
		['nuta', 35, 5],
		['sknuta', 37, 9],
		['ouc', -1, 3],
		['kouc', 39, 6],
		['nouc', 39, 5],
		['sknouc', 41, 9],
		['rouc', 39, 11],
		['erouc', 43, 2],
		['\u00EDc', -1, 16],
		['d\u00EDc', 45, 15],
		['j\u00EDc', 45, 3],
		['aj\u00EDc', 47, 12],
		['ej\u00EDc', 47, 8],
		['uj\u00EDc', 47, 1],
		['s\u00EDc', 45, 7],
		['st\u00EDc', 45, 14],
		['z\u00EDc', 45, 13],
		['\u017E\u00EDc', 45, 4],
		['ouce', -1, 3],
		['kouce', 55, 6],
		['nouce', 55, 5],
		['sknouce', 57, 9],
		['rouce', 55, 11],
		['erouce', 59, 2],
		['\u00EDce', -1, 16],
		['d\u00EDce', 61, 15],
		['j\u00EDce', 61, 3],
		['aj\u00EDce', 63, 12],
		['ej\u00EDce', 63, 8],
		['uj\u00EDce', 63, 1],
		['s\u00EDce', 61, 7],
		['st\u00EDce', 61, 14],
		['z\u00EDce', 61, 13],
		['\u017E\u00EDce', 61, 4],
		['je', -1, 3],
		['aje', 71, 12],
		['eje', 71, 8],
		['uje', 71, 1],
		['me', -1, 16],
		['eme', 75, 3],
		['jeme', 76, 3],
		['ujeme', 77, 1],
		['neme', 76, 5],
		['skneme', 79, 9],
		['ereme', 76, 2],
		['\u010Deme', 76, 6],
		['\u0159eme', 76, 11],
		['\u017Eeme', 76, 4],
		['jme', 75, 3],
		['ejme', 85, 16],
		['ujme', 85, 1],
		['erme', 75, 2],
		['sme', 75, 7],
		['zme', 75, 13],
		['\u00E1me', 75, 12],
		['\u00EDme', 75, 16],
		['d\u00EDme', 92, 15],
		['s\u00EDme', 92, 7],
		['st\u00EDme', 92, 14],
		['z\u00EDme', 92, 13],
		['\u010Dme', 75, 6],
		['\u010Fme', 75, 15],
		['n\u011Bme', 75, 5],
		['skn\u011Bme', 99, 9],
		['st\u011Bme', 75, 14],
		['\u0148me', 75, 5],
		['\u017Eme', 75, 4],
		['ne', -1, 5],
		['skne', 104, 9],
		['ere', -1, 2],
		['se', -1, 7],
		['te', -1, 16],
		['ete', 108, 3],
		['jete', 109, 3],
		['ujete', 110, 1],
		['nete', 109, 5],
		['sknete', 112, 9],
		['erete', 109, 2],
		['\u010Dete', 109, 6],
		['\u0159ete', 109, 11],
		['\u017Eete', 109, 4],
		['jte', 108, 3],
		['ejte', 118, 16],
		['ujte', 118, 1],
		['erte', 108, 2],
		['ste', 108, 7],
		['zte', 108, 13],
		['\u00E1te', 108, 12],
		['\u00EDte', 108, 16],
		['d\u00EDte', 125, 15],
		['s\u00EDte', 125, 7],
		['st\u00EDte', 125, 14],
		['z\u00EDte', 125, 13],
		['\u010Dte', 108, 6],
		['\u010Fte', 108, 15],
		['n\u011Bte', 108, 5],
		['skn\u011Bte', 132, 9],
		['st\u011Bte', 108, 14],
		['\u0148te', 108, 5],
		['\u017Ete', 108, 4],
		['ze', -1, 13],
		['\u010De', -1, 6],
		['\u0159e', -1, 11],
		['av\u0161e', -1, 5],
		['nuv\u0161e', -1, 5],
		['\u017Ee', -1, 4],
		['ji', -1, 3],
		['uji', 143, 1],
		['li', -1, 3],
		['ali', 145, 16],
		['rali', 146, 2],
		['ovali', 146, 1],
		['zali', 146, 4],
		['eli', 145, 8],
		['\u0159eli', 150, 11],
		['ili', 145, 13],
		['dili', 152, 15],
		['sili', 152, 7],
		['stili', 152, 14],
		['zili', 152, 13],
		['kli', 145, 6],
		['skli', 157, 9],
		['nuli', 145, 5],
		['\u011Bli', 145, 10],
		['ni', -1, 5],
		['eni', 161, 16],
		['zeni', 162, 15],
		['\u010Deni', 162, 6],
		['\u0159eni', 162, 11],
		['\u0161eni', 162, 7],
		['\u017Eeni', 162, 13],
		['skni', 161, 9],
		['\u00E1ni', 161, 12],
		['r\u00E1ni', 169, 2],
		['ov\u00E1ni', 169, 1],
		['z\u00E1ni', 169, 4],
		['\u011Bni', 161, 10],
		['st\u011Bni', 173, 14],
		['\u0161t\u011Bni', 173, 16],
		['ti', -1, 3],
		['ati', 176, 5],
		['sti', 176, 14],
		['nuti', 176, 5],
		['sknuti', 179, 9],
		['\u0159i', -1, 11],
		['av\u0161i', -1, 5],
		['nuv\u0161i', -1, 5],
		['j', -1, 3],
		['ej', 184, 16],
		['uj', 184, 1],
		['l', -1, 3],
		['al', 187, 16],
		['ral', 188, 2],
		['oval', 188, 1],
		['zal', 188, 4],
		['el', 187, 8],
		['\u0159el', 192, 11],
		['il', 187, 13],
		['dil', 194, 15],
		['sil', 194, 7],
		['stil', 194, 14],
		['zil', 194, 13],
		['kl', 187, 6],
		['skl', 199, 9],
		['nul', 187, 5],
		['\u011Bl', 187, 10],
		['\u00E1m', -1, 12],
		['\u00EDm', -1, 16],
		['d\u00EDm', 204, 15],
		['s\u00EDm', 204, 7],
		['st\u00EDm', 204, 14],
		['z\u00EDm', 204, 13],
		['en', -1, 16],
		['zen', 209, 15],
		['\u010Den', 209, 6],
		['\u0159en', 209, 11],
		['\u0161en', 209, 7],
		['\u017Een', 209, 13],
		['\u00E1n', -1, 12],
		['r\u00E1n', 215, 2],
		['ov\u00E1n', 215, 1],
		['z\u00E1n', 215, 4],
		['\u011Bn', -1, 10],
		['st\u011Bn', 219, 14],
		['\u0161t\u011Bn', 219, 16],
		['lo', -1, 3],
		['alo', 222, 16],
		['ralo', 223, 2],
		['ovalo', 223, 1],
		['zalo', 223, 4],
		['elo', 222, 8],
		['\u0159elo', 227, 11],
		['ilo', 222, 13],
		['dilo', 229, 15],
		['silo', 229, 7],
		['stilo', 229, 14],
		['zilo', 229, 13],
		['klo', 222, 6],
		['sklo', 234, 9],
		['nulo', 222, 5],
		['\u011Blo', 222, 10],
		['eno', -1, 16],
		['zeno', 238, 15],
		['\u010Deno', 238, 6],
		['\u0159eno', 238, 11],
		['\u0161eno', 238, 7],
		['\u017Eeno', 238, 13],
		['\u00E1no', -1, 12],
		['r\u00E1no', 244, 2],
		['ov\u00E1no', 244, 1],
		['z\u00E1no', 244, 4],
		['\u011Bno', -1, 10],
		['st\u011Bno', 248, 14],
		['\u0161t\u011Bno', 248, 16],
		['to', -1, 3],
		['ato', 251, 5],
		['nuto', 251, 5],
		['sknuto', 253, 9],
		['er', -1, 2],
		['s', -1, 7],
		['at', -1, 5],
		['nut', -1, 5],
		['sknut', 258, 9],
		['u', -1, 3],
		['ju', 260, 3],
		['uju', 261, 1],
		['nu', 260, 5],
		['sknu', 263, 9],
		['ou', 260, 3],
		['jou', 265, 3],
		['ujou', 266, 1],
		['nou', 265, 5],
		['sknou', 268, 9],
		['erou', 265, 2],
		['\u010Dou', 265, 6],
		['\u0159ou', 265, 11],
		['\u017Eou', 265, 4],
		['eru', 260, 2],
		['\u010Du', 260, 6],
		['\u0159u', 260, 11],
		['\u017Eu', 260, 4],
		['av', -1, 5],
		['nuv', -1, 5],
		['ly', -1, 3],
		['aly', 280, 16],
		['raly', 281, 2],
		['ovaly', 281, 1],
		['zaly', 281, 4],
		['ely', 280, 8],
		['\u0159ely', 285, 11],
		['ily', 280, 13],
		['dily', 287, 15],
		['sily', 287, 7],
		['stily', 287, 14],
		['zily', 287, 13],
		['kly', 280, 6],
		['skly', 292, 9],
		['nuly', 280, 5],
		['\u011Bly', 280, 10],
		['eny', -1, 16],
		['zeny', 296, 15],
		['\u010Deny', 296, 6],
		['\u0159eny', 296, 11],
		['\u0161eny', 296, 7],
		['\u017Eeny', 296, 13],
		['\u00E1ny', -1, 12],
		['r\u00E1ny', 302, 2],
		['ov\u00E1ny', 302, 1],
		['z\u00E1ny', 302, 4],
		['\u011Bny', -1, 10],
		['st\u011Bny', 306, 14],
		['\u0161t\u011Bny', 306, 16],
		['ty', -1, 3],
		['aty', 309, 5],
		['nuty', 309, 5],
		['sknuty', 311, 9],
		['z', -1, 13],
		['\u00E1', -1, 12],
		['d\u00ED', -1, 15],
		['j\u00ED', -1, 3],
		['aj\u00ED', 316, 12],
		['ej\u00ED', 316, 8],
		['uj\u00ED', 316, 1],
		['s\u00ED', -1, 7],
		['st\u00ED', -1, 14],
		['z\u00ED', -1, 13],
		['\u010D', -1, 6],
		['\u010F', -1, 15],
		['\u011B', -1, 10],
		['d\u011B', 325, 15],
		['st\u011B', 325, 14],
		['\u0148', -1, 5],
		['e\u0161', -1, 3],
		['je\u0161', 329, 3],
		['uje\u0161', 330, 1],
		['ne\u0161', 329, 5],
		['skne\u0161', 332, 9],
		['ere\u0161', 329, 2],
		['\u010De\u0161', 329, 6],
		['\u0159e\u0161', 329, 11],
		['\u017Ee\u0161', 329, 4],
		['\u00E1\u0161', -1, 12],
		['\u00ED\u0161', -1, 16],
		['d\u00ED\u0161', 339, 15],
		['s\u00ED\u0161', 339, 7],
		['st\u00ED\u0161', 339, 14],
		['z\u00ED\u0161', 339, 13],
		['\u017E', -1, 4],
	]

	/** @const */ var a_8 = [
		['hle', -1, 1],
		['koli', -1, 1],
		['si', -1, 1],
		['mo', -1, 1],
		['koliv', -1, 1],
		['ky', -1, 1],
	]

	/** @const */ var a_9 = [
		['bb', -1, 1],
		['dd', -1, 1],
		['ff', -1, 1],
		['gg', -1, 1],
		['mm', -1, 1],
		['nn', -1, 1],
		['pp', -1, 1],
		['rr', -1, 1],
		['tt', -1, 1],
	]

	/** @const */ var /** Array<int> */ g_vowel = [
		17,
		65,
		16,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		17,
		4,
		18,
		0,
		0,
		0,
		4,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		64,
	]

	/** @const */ var /** Array<int> */ g_consonant = [
		119,
		223,
		119,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		40,
		0,
		0,
		0,
		0,
		0,
		0,
		64,
		0,
		128,
		128,
		8,
		0,
		0,
		16,
	]

	/** @const */ var /** Array<int> */ g_aeiou = [17, 65, 16]

	var /** boolean */ B_found_suffix = false
	var /** number */ I_p1 = 0

	/** @return {boolean} */
	function r_mark_regions() {
		I_p1 = base.limit
		golab0:
		while (true) {
			lab1: {
				if (!(base.in_grouping(g_vowel, 97, 367))) {
					break lab1
				}
				break golab0
			}
			if (base.cursor >= base.limit) {
				return false
			}
			base.cursor++
		}
		golab2:
		while (true) {
			lab3: {
				if (!(base.out_grouping(g_vowel, 97, 367))) {
					break lab3
				}
				break golab2
			}
			if (base.cursor >= base.limit) {
				return false
			}
			base.cursor++
		}
		I_p1 = base.cursor
		return true
	}

	/** @return {boolean} */
	function r_postlude() {
		var /** number */ among_var
		while (true) {
			var /** number */ v_1 = base.cursor
			lab0: {
				base.bra = base.cursor
				among_var = base.find_among(a_0)
				if (among_var == 0) {
					break lab0
				}
				base.ket = base.cursor
				switch (among_var) {
					case 1:
						if (!base.slice_from('a')) {
							return false
						}
						break
					case 2:
						if (!base.slice_from('e')) {
							return false
						}
						break
					case 3:
						if (!base.slice_from('i')) {
							return false
						}
						break
					case 4:
						if (!base.slice_from('o')) {
							return false
						}
						break
					case 5:
						if (!base.slice_from('u')) {
							return false
						}
						break
					case 6:
						if (!base.slice_from('y')) {
							return false
						}
						break
					case 7:
						if (!base.slice_from('c')) {
							return false
						}
						break
					case 8:
						if (!base.slice_from('d')) {
							return false
						}
						break
					case 9:
						if (!base.slice_from('n')) {
							return false
						}
						break
					case 10:
						if (!base.slice_from('r')) {
							return false
						}
						break
					case 11:
						if (!base.slice_from('s')) {
							return false
						}
						break
					case 12:
						if (!base.slice_from('t')) {
							return false
						}
						break
					case 13:
						if (!base.slice_from('z')) {
							return false
						}
						break
					case 14:
						if (base.cursor >= base.limit) {
							break lab0
						}
						base.cursor++
						break
				}
				continue
			}
			base.cursor = v_1
			break
		}
		return true
	}

	/** @return {boolean} */
	function r_exception() {
		var /** number */ among_var
		base.bra = base.cursor
		among_var = base.find_among(a_1)
		if (among_var == 0) {
			return false
		}
		base.ket = base.cursor
		if (base.cursor < base.limit) {
			return false
		}
		switch (among_var) {
			case 1:
				if (!base.slice_from('byt')) {
					return false
				}
				break
			case 2:
				if (!base.slice_from('mit')) {
					return false
				}
				break
			case 3:
				if (!base.slice_from('jit')) {
					return false
				}
				break
			case 4:
				if (!base.slice_from('jist')) {
					return false
				}
				break
			case 5:
				if (!base.slice_from('snist')) {
					return false
				}
				break
			case 6:
				if (!base.slice_from('videt')) {
					return false
				}
				break
			case 7:
				if (!base.slice_from('vedet')) {
					return false
				}
				break
			case 8:
				if (!base.slice_from('chtit')) {
					return false
				}
				break
		}
		return true
	}

	/** @return {boolean} */
	function r_R1() {
		if (!(I_p1 <= base.cursor)) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_nouns_suffixes() {
		var /** number */ among_var
		var /** number */ v_1 = base.limit - base.cursor
		lab0: {
			base.ket = base.cursor
			among_var = base.find_among_b(a_2)
			if (among_var == 0) {
				break lab0
			}
			base.bra = base.cursor
			if (!r_R1()) {
				break lab0
			}
			switch (among_var) {
				case 1:
					if (!base.slice_del()) {
						return false
					}
					B_found_suffix = true
					break
				case 2:
					if (!base.slice_del()) {
						return false
					}
					base.ket = base.cursor
					if (!(base.eq_s_b('\u0161'))) {
						break lab0
					}
					base.bra = base.cursor
					if (!base.slice_from('ch')) {
						return false
					}
					B_found_suffix = true
					break
			}
		}
		base.cursor = base.limit - v_1
		return true
	}

	/** @return {boolean} */
	function r_nouns_endings() {
		var /** number */ among_var
		var /** number */ v_1 = base.limit - base.cursor
		lab0: {
			base.ket = base.cursor
			among_var = base.find_among_b(a_3)
			if (among_var == 0) {
				break lab0
			}
			base.bra = base.cursor
			if (!r_R1()) {
				break lab0
			}
			switch (among_var) {
				case 1:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c1 = base.cursor
						base.insert(base.cursor, base.cursor, 'ba')
						base.cursor = c1
					}
					break
				case 2:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c2 = base.cursor
						base.insert(base.cursor, base.cursor, 'ec')
						base.cursor = c2
					}
					break
				case 3:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c3 = base.cursor
						base.insert(base.cursor, base.cursor, 'lo')
						base.cursor = c3
					}
					break
				case 4:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c4 = base.cursor
						base.insert(base.cursor, base.cursor, 'ra')
						base.cursor = c4
					}
					break
				case 5:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c5 = base.cursor
						base.insert(base.cursor, base.cursor, 'na')
						base.cursor = c5
					}
					break
				case 6:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c6 = base.cursor
						base.insert(base.cursor, base.cursor, 'e')
						base.cursor = c6
					}
					break
				case 7:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c7 = base.cursor
						base.insert(base.cursor, base.cursor, 'no')
						base.cursor = c7
					}
					break
				case 8:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c8 = base.cursor
						base.insert(base.cursor, base.cursor, 'va')
						base.cursor = c8
					}
					break
				case 9:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c9 = base.cursor
						base.insert(base.cursor, base.cursor, 'ek')
						base.cursor = c9
					}
					break
				case 10:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c10 = base.cursor
						base.insert(base.cursor, base.cursor, 't\u011B')
						base.cursor = c10
					}
					break
				case 11:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c11 = base.cursor
						base.insert(base.cursor, base.cursor, 'g')
						base.cursor = c11
					}
					break
				case 12:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c12 = base.cursor
						base.insert(base.cursor, base.cursor, 'vo')
						base.cursor = c12
					}
					break
				case 13:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c13 = base.cursor
						base.insert(base.cursor, base.cursor, 'a')
						base.cursor = c13
					}
					break
				case 14:
					if (!base.slice_del()) {
						return false
					}
					var /** number */ v_2 = base.limit - base.cursor
					if (!(base.in_grouping_b(g_aeiou, 97, 117))) {
						break lab0
					}
					base.cursor = base.limit - v_2
					{
						var /** number */ c14 = base.cursor
						base.insert(base.cursor, base.cursor, '\u0148')
						base.cursor = c14
					}
					var /** number */ v_3 = base.limit - base.cursor
					if (!(base.eq_s_b('y'))) {
						break lab0
					}
					base.cursor = base.limit - v_3
					{
						var /** number */ c15 = base.cursor
						base.insert(base.cursor, base.cursor, 'n\u011B')
						base.cursor = c15
					}
					var /** number */ v_4 = base.limit - base.cursor
					if (!(base.in_grouping_b(g_consonant, 98, 382))) {
						break lab0
					}
					base.cursor = base.limit - v_4
					{
						var /** number */ c16 = base.cursor
						base.insert(base.cursor, base.cursor, 'e\u0148')
						base.cursor = c16
					}
					B_found_suffix = true
					break
				case 15:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c17 = base.cursor
						base.insert(base.cursor, base.cursor, '\u011B')
						base.cursor = c17
					}
					break
				case 16:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c18 = base.cursor
						base.insert(base.cursor, base.cursor, 'ka')
						base.cursor = c18
					}
					break
				case 17:
					if (!base.slice_del()) {
						return false
					}
					break
			}
		}
		base.cursor = base.limit - v_1
		return true
	}

	/** @return {boolean} */
	function r_adjectives_suffixes() {
		var /** number */ among_var
		var /** number */ v_1 = base.limit - base.cursor
		lab0: {
			base.ket = base.cursor
			among_var = base.find_among_b(a_4)
			if (among_var == 0) {
				break lab0
			}
			base.bra = base.cursor
			if (!r_R1()) {
				break lab0
			}
			switch (among_var) {
				case 1:
					if (!base.slice_del()) {
						return false
					}
					B_found_suffix = true
					break
				case 2:
					if (!base.slice_del()) {
						return false
					}
					if (!r_alternance_i()) {
						break lab0
					}
					B_found_suffix = true
					break
				case 3:
					if (!base.slice_del()) {
						return false
					}
					lab1: {
						var /** number */ v_2 = base.limit - base.cursor
						lab2: {
							base.ket = base.cursor
							if (!(base.eq_s_b('\u017E'))) {
								break lab2
							}
							base.bra = base.cursor
							if (!base.slice_from('h')) {
								return false
							}
							break lab1
						}
						base.cursor = base.limit - v_2
						base.ket = base.cursor
						if (!(base.eq_s_b('\u0161'))) {
							break lab0
						}
						base.bra = base.cursor
						if (!base.slice_from('ch')) {
							return false
						}
					}
					B_found_suffix = true
					break
				case 4:
					if (!base.slice_del()) {
						return false
					}
					lab3: {
						var /** number */ v_3 = base.limit - base.cursor
						lab4: {
							base.ket = base.cursor
							if (!(base.eq_s_b('\u017E'))) {
								break lab4
							}
							base.bra = base.cursor
							if (!base.slice_from('h')) {
								return false
							}
							break lab3
						}
						base.cursor = base.limit - v_3
						lab5: {
							base.ket = base.cursor
							if (!(base.eq_s_b('\u0161'))) {
								break lab5
							}
							base.bra = base.cursor
							if (!base.slice_from('ch')) {
								return false
							}
							break lab3
						}
						base.cursor = base.limit - v_3
						base.ket = base.cursor
						if (!(base.eq_s_b('\u010D'))) {
							break lab0
						}
						base.bra = base.cursor
						if (!base.slice_from('k')) {
							return false
						}
					}
					B_found_suffix = true
					break
				case 5:
					if (!base.slice_del()) {
						return false
					}
					base.ket = base.cursor
					if (!(base.eq_s_b('\u010D'))) {
						break lab0
					}
					base.bra = base.cursor
					if (!base.slice_from('k')) {
						return false
					}
					B_found_suffix = true
					break
				case 6:
					if (!base.slice_del()) {
						return false
					}
					lab6: {
						var /** number */ v_4 = base.limit - base.cursor
						lab7: {
							base.ket = base.cursor
							if (!(base.eq_s_b('\u010D'))) {
								break lab7
							}
							base.bra = base.cursor
							if (!base.slice_from('k')) {
								return false
							}
							break lab6
						}
						base.cursor = base.limit - v_4
						lab8: {
							base.ket = base.cursor
							if (!(base.eq_s_b('\u010D\u0165'))) {
								break lab8
							}
							base.bra = base.cursor
							if (!base.slice_from('ck')) {
								return false
							}
							break lab6
						}
						base.cursor = base.limit - v_4
						lab9: {
							base.ket = base.cursor
							if (!(base.eq_s_b('\u0161\u0165'))) {
								break lab9
							}
							base.bra = base.cursor
							if (!base.slice_from('sk')) {
								return false
							}
							break lab6
						}
						base.cursor = base.limit - v_4
						lab10: {
							base.ket = base.cursor
							if (!(base.eq_s_b('\u017E'))) {
								break lab10
							}
							base.bra = base.cursor
							if (!base.slice_from('h')) {
								return false
							}
							break lab6
						}
						base.cursor = base.limit - v_4
						base.ket = base.cursor
						if (!(base.eq_s_b('\u0161'))) {
							break lab0
						}
						base.bra = base.cursor
						if (!base.slice_from('ch')) {
							return false
						}
					}
					B_found_suffix = true
					break
			}
		}
		base.cursor = base.limit - v_1
		return true
	}

	/** @return {boolean} */
	function r_adjectives_endings() {
		var /** number */ among_var
		var /** number */ v_1 = base.limit - base.cursor
		lab0: {
			base.ket = base.cursor
			among_var = base.find_among_b(a_5)
			if (among_var == 0) {
				break lab0
			}
			base.bra = base.cursor
			if (!r_R1()) {
				break lab0
			}
			switch (among_var) {
				case 1:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c1 = base.cursor
						base.insert(base.cursor, base.cursor, 'sk\u00FD')
						base.cursor = c1
					}
					break
				case 2:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c2 = base.cursor
						base.insert(base.cursor, base.cursor, 'ck\u00FD')
						base.cursor = c2
					}
					break
				case 3:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c3 = base.cursor
						base.insert(base.cursor, base.cursor, 'k\u00FD')
						base.cursor = c3
					}
					break
				case 4:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c4 = base.cursor
						base.insert(base.cursor, base.cursor, 'ch\u00FD')
						base.cursor = c4
					}
					break
				case 5:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c5 = base.cursor
						base.insert(base.cursor, base.cursor, 'h\u00FD')
						base.cursor = c5
					}
					break
				case 6:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c6 = base.cursor
						base.insert(base.cursor, base.cursor, 'r\u00FD')
						base.cursor = c6
					}
					break
				case 7:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c7 = base.cursor
						base.insert(base.cursor, base.cursor, 'av\u00FD')
						base.cursor = c7
					}
					break
				case 8:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c8 = base.cursor
						base.insert(base.cursor, base.cursor, '\u00ED')
						base.cursor = c8
					}
					break
				case 9:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c9 = base.cursor
						base.insert(base.cursor, base.cursor, '\u016Fv')
						base.cursor = c9
					}
					break
				case 10:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c10 = base.cursor
						base.insert(base.cursor, base.cursor, '\u00FD')
						base.cursor = c10
					}
					break
				case 11:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c11 = base.cursor
						base.insert(base.cursor, base.cursor, 'in')
						base.cursor = c11
					}
					break
			}
		}
		base.cursor = base.limit - v_1
		return true
	}

	/** @return {boolean} */
	function r_verbs_suffixes() {
		var /** number */ v_1 = base.limit - base.cursor
		lab0: {
			base.ket = base.cursor
			if (base.find_among_b(a_6) == 0) {
				break lab0
			}
			base.bra = base.cursor
			if (!r_R1()) {
				break lab0
			}
			B_found_suffix = true
		}
		base.cursor = base.limit - v_1
		return true
	}

	/** @return {boolean} */
	function r_verbs_endings() {
		var /** number */ among_var
		var /** number */ v_1 = base.limit - base.cursor
		lab0: {
			base.ket = base.cursor
			among_var = base.find_among_b(a_7)
			if (among_var == 0) {
				break lab0
			}
			base.bra = base.cursor
			switch (among_var) {
				case 1:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c1 = base.cursor
						base.insert(base.cursor, base.cursor, 'ovat')
						base.cursor = c1
					}
					break
				case 2:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c2 = base.cursor
						base.insert(base.cursor, base.cursor, 'r\u00E1t')
						base.cursor = c2
					}
					break
				case 3:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c3 = base.cursor
						base.insert(base.cursor, base.cursor, 't')
						base.cursor = c3
					}
					break
				case 4:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c4 = base.cursor
						base.insert(base.cursor, base.cursor, 'zat')
						base.cursor = c4
					}
					break
				case 5:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c5 = base.cursor
						base.insert(base.cursor, base.cursor, 'nout')
						base.cursor = c5
					}
					break
				case 6:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c6 = base.cursor
						base.insert(base.cursor, base.cursor, 'ct')
						base.cursor = c6
					}
					break
				case 7:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c7 = base.cursor
						base.insert(base.cursor, base.cursor, 'sit')
						base.cursor = c7
					}
					break
				case 8:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c8 = base.cursor
						base.insert(base.cursor, base.cursor, 'et')
						base.cursor = c8
					}
					break
				case 9:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c9 = base.cursor
						base.insert(base.cursor, base.cursor, 'sknout')
						base.cursor = c9
					}
					break
				case 10:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c10 = base.cursor
						base.insert(base.cursor, base.cursor, '\u011Bt')
						base.cursor = c10
					}
					break
				case 11:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c11 = base.cursor
						base.insert(base.cursor, base.cursor, '\u0159\u00EDt')
						base.cursor = c11
					}
					break
				case 12:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c12 = base.cursor
						base.insert(base.cursor, base.cursor, 'at')
						base.cursor = c12
					}
					break
				case 13:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c13 = base.cursor
						base.insert(base.cursor, base.cursor, 'zit')
						base.cursor = c13
					}
					break
				case 14:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c14 = base.cursor
						base.insert(base.cursor, base.cursor, 'stit')
						base.cursor = c14
					}
					break
				case 15:
					if (!base.slice_del()) {
						return false
					}
					{
						var /** number */ c15 = base.cursor
						base.insert(base.cursor, base.cursor, 'dit')
						base.cursor = c15
					}
					break
				case 16:
					if (!base.slice_del()) {
						return false
					}
					break
			}
		}
		base.cursor = base.limit - v_1
		return true
	}

	/** @return {boolean} */
	function r_adverbs_suffixes() {
		var /** number */ v_1 = base.limit - base.cursor
		lab0: {
			base.ket = base.cursor
			if (base.find_among_b(a_8) == 0) {
				break lab0
			}
			base.bra = base.cursor
			if (!r_R1()) {
				break lab0
			}
			if (!base.slice_del()) {
				return false
			}
			B_found_suffix = true
		}
		base.cursor = base.limit - v_1
		return true
	}

	/** @return {boolean} */
	function r_end_vowel() {
		base.ket = base.cursor
		if (!(base.in_grouping_b(g_vowel, 97, 367))) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_from('')) {
			return false
		}
		base.ket = base.cursor
		if (!(base.in_grouping_b(g_vowel, 97, 367))) {
			return false
		}
		base.bra = base.cursor
		if (!base.slice_from('')) {
			return false
		}
		return true
	}

	/** @return {boolean} */
	function r_alternance_i() {
		lab0: {
			var /** number */ v_1 = base.limit - base.cursor
			lab1: {
				base.ket = base.cursor
				if (!(base.eq_s_b('\u010D'))) {
					break lab1
				}
				base.bra = base.cursor
				if (!base.slice_from('k')) {
					return false
				}
				break lab0
			}
			base.cursor = base.limit - v_1
			base.ket = base.cursor
			if (!(base.eq_s_b('\u0161'))) {
				return false
			}
			base.bra = base.cursor
			if (!base.slice_from('ch')) {
				return false
			}
		}
		return true
	}

	/** @return {boolean} */
	function r_end_double() {
		var /** number */ v_1 = base.limit - base.cursor
		if (base.find_among_b(a_9) == 0) {
			return false
		}
		base.cursor = base.limit - v_1
		base.ket = base.cursor
		if (base.cursor <= base.limit_backward) {
			return false
		}
		base.cursor--
		base.bra = base.cursor
		if (!base.slice_del()) {
			return false
		}
		return true
	}

	this.stem = /** @return {boolean} */ function () {
		lab0: {
			var /** number */ v_1 = base.cursor
			lab1: {
				if (!r_exception()) {
					break lab1
				}
				break lab0
			}
			base.cursor = v_1
			lab2: {
				{
					var /** number */ v_2 = base.cursor
					lab3: {
						{
							var /** number */ c1 = base.cursor + 4
							if (c1 > base.limit) {
								break lab3
							}
							base.cursor = c1
						}
						break lab2
					}
					base.cursor = v_2
				}
				break lab0
			}
			base.cursor = v_1
			var /** number */ v_3 = base.cursor
			r_mark_regions()
			base.cursor = v_3
			B_found_suffix = false
			base.limit_backward = base.cursor
			base.cursor = base.limit
			r_nouns_suffixes()
			lab4: {
				lab5: {
					if (!B_found_suffix) {
						break lab5
					}
					break lab4
				}
				r_nouns_endings()
			}
			lab6: {
				lab7: {
					if (!B_found_suffix) {
						break lab7
					}
					break lab6
				}
				r_nouns_suffixes()
			}
			lab8: {
				lab9: {
					if (!B_found_suffix) {
						break lab9
					}
					break lab8
				}
				r_adjectives_suffixes()
			}
			lab10: {
				lab11: {
					if (!B_found_suffix) {
						break lab11
					}
					break lab10
				}
				r_adjectives_endings()
			}
			lab12: {
				lab13: {
					if (!B_found_suffix) {
						break lab13
					}
					break lab12
				}
				r_adjectives_suffixes()
			}
			lab14: {
				lab15: {
					if (!B_found_suffix) {
						break lab15
					}
					break lab14
				}
				if (!r_adverbs_suffixes()) {
					return false
				}
			}
			lab16: {
				lab17: {
					if (!B_found_suffix) {
						break lab17
					}
					break lab16
				}
				r_verbs_endings()
			}
			lab18: {
				lab19: {
					if (!B_found_suffix) {
						break lab19
					}
					break lab18
				}
				r_verbs_suffixes()
			}
			var /** number */ v_20 = base.limit - base.cursor
			r_end_double()
			base.cursor = base.limit - v_20
			var /** number */ v_21 = base.limit - base.cursor
			r_end_vowel()
			base.cursor = base.limit - v_21
			var /** number */ v_22 = base.limit - base.cursor
			r_end_double()
			base.cursor = base.limit - v_22
			base.cursor = base.limit_backward
		}
		var /** number */ v_23 = base.cursor
		r_postlude()
		base.cursor = v_23
		return true
	}

	/**@return{string}*/
	this['stemWord'] = function (/**string*/ word) {
		base.setCurrent(word)
		this.stem()
		return base.getCurrent()
	}
})
